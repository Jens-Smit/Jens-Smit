{% extends 'base.html.twig' %}

{% block title %}Your Dashboard{% endblock %}

{% block body %}

<!-- Modal -->
<div class="modal fade" id="modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel"></h5>
                <button type="button" id="modalCloseBtn" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="closeModal()"></button>
            </div>
            <div class="modal-body" id="modal-body">
                <!-- Hier wird der Inhalt von app_user_contrect geladen -->
            </div>
        </div>
    </div>
</div>
<div class="example-wrapper">
  <!-- Adresse für targetLat und targetLng  -->
   <div class="text-center mb-5  border border-info ">
     
        <div class="card-body" style='text-align: center; 'id='UserCheck'>
        
        
      </div>
    </div>
   <!--  <div class="text-center mb-5  border border-info ">
        <div class="card-body" style='text-align: center; 'id='Useramendment'>
        
        
      </div>
    </div>
   -->
</div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
 <script src="{{ asset('js/modal.js') }}"></script>    


  <script>
  function initMap() {
    var geocoder = new google.maps.Geocoder(); 
    var address = "{{ app.user.objekt.adresse }}, {{ app.user.objekt.plz }}, {{ app.user.objekt.ort }}";
    geocoder.geocode({ address: address }, function(results, status) {
      if (status === 'OK') {
        console.log('first OK');
        // Die geocodierten Ergebnisse können mehrere Resultate haben, wir verwenden hier das erste Resultat
        var location = results[0].geometry.location;
        var targetLat = location.lat();
        var targetLng = location.lng();
        console.log(address);
        navigator.geolocation.getCurrentPosition(position => {
            const userLat = position.coords.latitude;
            const userLng = position.coords.longitude;

            // Berechnung der Entfernung zwischen den beiden Koordinaten
            const distance = getDistanceFromLatLonInKm(userLat, userLng, targetLat, targetLng);
              
              console.log(distance);
            // Überprüfen, ob die Entfernung kleiner als 1 km ist (Benutzer ist am Standort)
            if (distance < 10) {
              $('#UserCheck').html('<div class="spinner-border text-primary" role="status">  <span class="sr-only">Loading...</span></div>');
            
              var date = new Date();
              var data = { time: date, distance: true };
              document.cookie = JSON.stringify(data);
              loadUserCheck();
            
            } else {
              $('#UserCheck').html('<div class="spinner-border text-primary" role="status">  <span class="sr-only">Loading...</span></div>');
              console.log('test');
              var cookieData =  document.cookie;
              console.log(cookieData);
              let index = cookieData.indexOf("{");
              cookieData = cookieData.substring(index);
              console.log(cookieData);
              cookieData = JSON.parse(cookieData);
             
              var cookieTime = new Date(cookieData.time);
              var currentTime = new Date();
              var timeDiff = currentTime - cookieTime; // time difference in milliseconds
          
              if (timeDiff < 5 * 60 * 1000) {          //5 minuten ist der cookie aktiv
              console.log("save duch Cookie"); 
                loadUserCheck();
              } else {
                $('#CheckIn').html('Du bist nicht am Standort deine Entfernmung beträgt '+distance+' Km ');
              }
              
            }
        });
        console.log('ende navigator.geolocation');
      } else {
        console.error('Geocode was not successful for the following reason:', status);
      }
    });
  }
   function loadUserCheck(){
    $('#UserCheck').html('<div class="spinner-border text-primary" role="status">  <span class="sr-only">Loading...</span></div>');
    console.log('loadUserCheck')
    $.ajax({
              url: "{{path('app_arbeitszeit')}}",
              type: 'GET',
              dataType: 'html',
              success: function(response){
                  
                  $('#UserCheck').html(response);
              },
              error: function(xhr, status, error){
                  console.log(error);
              }
          });
  }
  function userCheckOut(){
         $('#UserCheck').html('<div class="spinner-border text-primary" role="status">  <span class="sr-only">Loading...</span></div>');
     $.ajax({
              url: "{{path('app_arbeitszeit_checkOut')}}",
              type: 'GET',
              dataType: 'json',
              success: function(response){
                
                  loadUserCheck();
              },
              error: function(xhr, status, error){
                  console.log(error);
              }
          });
  }
   function userCheckIn(){
         $('#UserCheck').html('<div class="spinner-border text-primary" role="status">  <span class="sr-only">Loading...</span></div>');
    
            console.log('userCheckIn');
          $.ajax({
              url: "{{path('app_arbeitszeit_checkIn')}}",
              type: 'GET',
              dataType: 'json',
              success: function(response){
                
                  loadUserCheck();
              },
              error: function(xhr, status, error){
                  console.log(error);
              }
          });

  } 
      
  // Funktion zur Berechnung der Entfernung zwischen zwei Koordinaten (in Kilometern)
  function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
    const R = 6371; // Radius der Erde in km
    const dLat = deg2rad(lat2 - lat1);
    const dLon = deg2rad(lon2 - lon1);
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
      Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const d = R * c; // Entfernung in km
    return d;
  }

  // Funktion zur Konvertierung von Grad in Bogenmaß
  function deg2rad(deg) {
    return deg * (Math.PI / 180)
  }

 </script>
 <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAS5-fdtC9sQ93dsTiP0v7JG3rVNFX8I0k&callback=initMap" ></script>
 
{% endblock %}
