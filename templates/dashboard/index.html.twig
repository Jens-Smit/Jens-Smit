{% extends 'base.html.twig' %}

{% block title %}Your Dashboard{% endblock %}

{% block body %}

<!-- Modal -->
<div class="modal fade" id="modal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel"></h5>
                <button type="button" id="modalCloseBtn" class="btn-close" data-bs-dismiss="modal" aria-label="Close" onclick="closeModal()"></button>
            </div>
            <div class="modal-body" id="modal-body">
                <!-- Hier wird der Inhalt von app_user_contrect geladen -->
            </div>
        </div>
    </div>
</div>
<div class="example-wrapper">
    
    <div class="text-center mb-5  border border-info ">
     
        <div class="card-body" style='text-align: center; 'id='UserCheck'>
        
        
      </div>
    </div>
    
   
</div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
 <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAS5-fdtC9sQ93dsTiP0v7JG3rVNFX8I0k&callback=initMap" async defer></script>
 <script>
  function initMap() {
            // Hier kannst du die Adresse eingeben, die du geocodieren möchtest
             let objektAdresse = "{{ app.user.objekt.adresse|default('') }}";
             let objektplz = "{{ app.user.objekt.plz|default('') }}";
             let objektOrt = "{{ app.user.objekt.ort|default('') }}";
            const address = objektAdresse+", "+ objektplz+" "+objektOrt;

            // Geocoder Objekt erstellen
            const geocoder = new google.maps.Geocoder();

            // Geocoding Anfrage
            geocoder.geocode({ 'address': address }, function(results, status) {
                if (status === 'OK') {
                    const targetLat = results[0].geometry.location.lat();
                    const targetLng = results[0].geometry.location.lng();
                    $('#UserCheck').html('<div class="spinner-border text-primary" role="status">  <span class="sr-only">Loading...</span></div>');
                        
                    // Abruf der aktuellen Position des Benutzers
                    navigator.geolocation.getCurrentPosition(position => {
                        const userLat = position.coords.latitude;
                        const userLng = position.coords.longitude;

                        // Berechnung der Entfernung zwischen den beiden Koordinaten
                        const distance = getDistanceFromLatLonInKm(userLat, userLng, targetLat, targetLng);

                        // Überprüfen, ob die Entfernung kleiner als 0.2 km ist (Benutzer ist am Standort)
                        if (distance < 0.2) {
                        var date = new Date();
                        var data = { time: date, distance: true };
                        document.cookie = JSON.stringify(data);
                        

                        loadUserCheck();
                        } else {
                        $('#UserCheck').html('<div class="spinner-border text-primary" role="status">  <span class="sr-only">Loading...</span></div>');
                       

                        var cookieData =  document.cookie;
                        
                        let index = cookieData.indexOf("{");
                        cookieData = cookieData.substring(index)
                        cookieData = JSON.parse(cookieData);
                        ;
                        var cookieTime = new Date(cookieData.time);
                        var currentTime = new Date();
                        var timeDiff = currentTime - cookieTime; // time difference in milliseconds
                        
                        if (timeDiff < 3 * 60 * 1000) {          //3 minuten ist der cookie aktiv
                        console.log("save duch Cookie"); 
                            loadUserCheck();
                        } else {
                            $('#CheckIn').html('Du bist nicht am Standort deine Entfernmung beträgt '+distance+' Km ');
                        }
                        
                        }
                    });
                } else {
                    console.error('Geocode war nicht erfolgreich: ' + status);
                }
            });
  }
  function userCheckIn(){
         $('#UserCheck').html('<div class="spinner-border text-primary" role="status">  <span class="sr-only">Loading...</span></div>');
    
            console.log('userCheckIn');
          $.ajax({
              url: "{{path('app_arbeitszeit_checkIn')}}",
              type: 'GET',
              dataType: 'json',
              success: function(response){
                
                  loadUserCheck();
              },
              error: function(xhr, status, error){
                  console.log(error);
              }
          });

  }  
  function userCheckOut(){
         $('#UserCheck').html('<div class="spinner-border text-primary" role="status">  <span class="sr-only">Loading...</span></div>');
     $.ajax({
              url: "{{path('app_arbeitszeit_checkOut')}}",
              type: 'GET',
              dataType: 'json',
              success: function(response){
                
                  loadUserCheck();
              },
              error: function(xhr, status, error){
                  console.log(error);
              }
          });
  }
  function openModal_Arbeitzzeit_aendern_beantragen(date,userid) {
   

     date = convertTimestamp(date);
     var currentDate = new Date(date);

     var options = "";
     for (var i = 0; i < 4; i++) {
         var pastDate = new Date(currentDate);
         pastDate.setDate(pastDate.getDate() - i);
         var pastDateString = pastDate.toISOString().split('T')[0];
         options += "<option value='" + pastDateString + "'>" + pastDateString + "</option>";
     }
     var data = "<div class='card text-center'> <div class='card-body'><select class=' text-center w-100 mb-2' name='day'>" + options + "</select><br><input class='text-center w-50 md-2' type='time' name='kommen'><input class='text-center w-50 mb-2'type='time' name='gehen'><br> <button class='btn btn-info mb-2 w-100' type='submit' onclick='save_times(" + userid + ")'> Änderung beantragen</button></p> </div></div>";
     $("#modal-body").html(data);
     $("#modal").modal("show");

  }
  function save_times(userid){
      var kommen =  $('input[name="kommen"]').val();
      var gehen =$('input[name="gehen"]').val();
      var day =$('select[name="day"]').val(); 
      console.log('save_times'); 
      var data = {
          kommen: kommen,
          gehen: gehen,
          day: day,
          userId: userid
      };
      $.ajax({
          url: '{{path('app_arbeitszeit_amendment')}}',
          method: 'POST',
          data: data,
          success: function(response) {
            console.log(response);
            closeModal();
          }
      });

  }
  function loadUserCheck(){
    $('#UserCheck').html('<div class="spinner-border text-primary" role="status">  <span class="sr-only">Loading...</span></div>');
    $.ajax({
              url: "{{path('app_arbeitszeit')}}",
              type: 'GET',
              dataType: 'html',
              success: function(response){
                  
                  $('#UserCheck').html(response);
              },
              error: function(xhr, status, error){
                  console.log(error);
              }
          });
  }
  function loadUseramendment(){
   
    $.ajax({
              url: "{{path('app_arbeitszeit_opanamendment')}}",
              type: 'GET',
              dataType: 'html',
              success: function(response){
               
                if (response != '"noroles"') {
                // Das Parent-Element auswählen
                const parentElement = document.querySelector('.example-wrapper');

                // Ein neues div-Element erstellen
                const newChild = document.createElement('div');

                // Klasse und ID hinzufügen
                newChild.className = 'child';
                newChild.id = 'Useramendment';

                // Das neue Element als Child hinzufügen
                parentElement.appendChild(newChild);
                 $('#Useramendment').html('<div class="spinner-border text-primary" role="status">  <span class="sr-only">Loading...</span></div>');
   console.log('tre')
                //

                    $('#Useramendment').html(response);
                  $('#save_amendment').submit(function(event) {
                    event.preventDefault();
                    var form = $(this);
                    $.ajax({
                        type: 'POST',
                        url: '{{path('app_arbeitszeit_SaveAmendment')}}',
                        data: form.serialize(),
                        success: function(response) {
                            if(response = true){
                            form.parent().parent().hide();    
                            }else{
                            form.parent().html('ERROR');   
                            }
                        },
                        error: function() {
                        }
                    });
                  });
                
                }
                
                  
                 
                  
              },
              error: function(xhr, status, error){
                  console.log(error);
              }
      });
      
  }
  // Funktion zur Berechnung der Entfernung zwischen zwei Koordinaten (in Kilometern)
  function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
    const R = 6371; // Radius der Erde in km
    const dLat = deg2rad(lat2 - lat1);
    const dLon = deg2rad(lon2 - lon1);
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
      Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const d = R * c; // Entfernung in km
    return d;
  }

  // Funktion zur Konvertierung von Grad in Bogenmaß
  function deg2rad(deg) {
    return deg * (Math.PI / 180)
  }
  $(document).ready(function(){
    loadUseramendment();
  });

 

 

  

 </script>
{% endblock %}
