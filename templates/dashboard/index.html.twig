{% extends 'base.html.twig' %}

{% block title %}Your Dashboard{% endblock %}

{% block body %}


<div class="example-wrapper">
    
    <div class="card text-center">
        <div class="card-body" id='UserCheck'>
        <h4 class="card-title" id='CheckIn'></h4>
        
      </div>
    </div>
   
</div>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
 
  <script>
    // Vordefinierte Koordinaten des Standorts
  
  function userCheckIn(){
         $('#UserCheck').html('<div class="spinner-border text-primary" role="status">  <span class="sr-only">Loading...</span></div>');
    
            console.log('userCheckIn');
          $.ajax({
              url: "{{path('app_arbeitszeit_checkIn')}}",
              type: 'GET',
              dataType: 'json',
              success: function(response){
                
                  loadUserCheck();
              },
              error: function(xhr, status, error){
                  console.log(error);
              }
          });

  }  
  function userCheckOut(){
         $('#UserCheck').html('<div class="spinner-border text-primary" role="status">  <span class="sr-only">Loading...</span></div>');
     $.ajax({
              url: "{{path('app_arbeitszeit_checkOut')}}",
              type: 'GET',
              dataType: 'json',
              success: function(response){
                
                  loadUserCheck();
              },
              error: function(xhr, status, error){
                  console.log(error);
              }
          });
  }
  function loadUserCheck(){
    $('#UserCheck').html('<div class="spinner-border text-primary" role="status">  <span class="sr-only">Loading...</span></div>');
    $.ajax({
              url: "{{path('app_arbeitszeit')}}",
              type: 'GET',
              dataType: 'html',
              success: function(response){
                  
                  $('#UserCheck').html(response);
              },
              error: function(xhr, status, error){
                  console.log(error);
              }
          });
  }


    
  const targetLat = 51.049372790658;
  const targetLng = 13.741302024057;

  // Abruf der aktuellen Position des Benutzers
  navigator.geolocation.getCurrentPosition(position => {
    const userLat = position.coords.latitude;
    const userLng = position.coords.longitude;

    // Berechnung der Entfernung zwischen den beiden Koordinaten
    const distance = getDistanceFromLatLonInKm(userLat, userLng, targetLat, targetLng);

    // Überprüfen, ob die Entfernung kleiner als 1 km ist (Benutzer ist am Standort)
    if (distance < 0.2) {
      $('#CheckIn').html('✅ Du bist am Standort!');
      var date = new Date();
      var data = { time: date, distance: true };
      document.cookie = JSON.stringify(data);
      loadUserCheck();
    
    } else {
      var cookieData =  document.cookie;
     
      let index = cookieData.indexOf("{");
      cookieData = cookieData.substring(index)
      cookieData = JSON.parse(cookieData);
      console.log(cookieData.time);
      var cookieTime = new Date(cookieData.time);
      var currentTime = new Date();
      var timeDiff = currentTime - cookieTime; // time difference in milliseconds
      console.log(timeDiff);
      if (timeDiff < 5 * 60 * 1000) {
       console.log("save duch Cookie"); 
        loadUserCheck();
      } else {
        $('#CheckIn').html('Du bist nicht am Standort deine Entfernmung beträgt '+distance+' Km ');
      }
      
    }
  });

  // Funktion zur Berechnung der Entfernung zwischen zwei Koordinaten (in Kilometern)
  function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
    const R = 6371; // Radius der Erde in km
    const dLat = deg2rad(lat2 - lat1);
    const dLon = deg2rad(lon2 - lon1);
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
      Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const d = R * c; // Entfernung in km
    return d;
  }

  // Funktion zur Konvertierung von Grad in Bogenmaß
  function deg2rad(deg) {
    return deg * (Math.PI / 180)
  }

 </script>
{% endblock %}
